-git --help - for help

-git --help log - for help on log

-git init (go to directory and say init

so git this is your repositary )

-pwd - present working directory 

-ls-l to list all the files and folders

git add . - means add all the files in 

-Pwd (present directory) 


git commit - m "initial commit"

-cd .git (trying to check what is my head pointing out to ? which checksum)

-cat head (o/p will be refs : refs/heads/master)

-cd refs 

-cd heads

-cat master (this will return the checksum)


permanent commit in repositary -m is like 

giving some message 

so what ever new files will get committed

-git log --online -4

-git log -n 1 (limit the number of limits)

-git log -n 2 (limit the number of limits)

-git log -n 0 (limit the number of limits)

-git log --author="kevin"  (look commits with author)

-git log --grep="Init" (search for particular text while 

commiting , so this is message commit text which we are

searching using grep)

-git status (branch we are working on , and it says clean if there are not changes )


-git add second_file.txt

-git add first_file.txt

-git add . (will add all files that needs to be moved to staging)

if we manually delete file from our system, we need to check

manually in our system , please refer to screenshots 33 ,34

we need to tell the same to GIT 

-git rm file_to_delete1.txt (telling GIT that i've removed file)

-git commit -m "deleted the file " (telling GIT in staging)

-git status (says clean , no changes (since we deleted from GIT perspective also)

one more easier way is as follows

-git rm file_to_delete2.txt (deletes permanently)

-git status (deleted)

-git commit -m "removed second file"

similarly for rename and move (refer 37 , 38 where we renamed manually)

But here GIT thinks file has been deleted and new file has been added

That is how GIT understands . 

check with git status (we will get the sames)


-git add file_to_delele5

-git rm file_to_delete4 (removes 4 and adds 5 )

-git status (shows that file has been renamed)


-git mv second_file.txt secondary_file

-git status

-git mv third_file.txt first_directory/third_file.txt

the above command will move the file to the particular directory structure

always "-" symbol says something has been removed and "+" symbol says

something has been added . when we say git status 

-git checkout -- index.html

how to unstage (for staged files , Please find below  )

-git reset HEAD resources.html.

 
-git commit -- amend -m "rearrange"  (this will undo last commit (the one which is a HEAD) )

-git dif --staged (show whats recent change been staged)


-git reset --soft 3gs2 (please refer 43 for complete details ,45 for soft 
check log for more details , check with diff -staged if the recent
changes exist or not )

-git reset --mixed 3gs2 (please refer 43 for complete details ,46 for mixed
check log for more details , check with diff -staged if the recent
changes exist or not)

-git reset --hard 3gs2 (please refer 43 for complete details ,46 for mixed
check log for more details , check with diff -staged if the recent
changes exist or not)

https://davidzych.com/difference-between-git-reset-soft-mixed-and-hard/

please refer the above for better understanding

project/.gitignore is used to ignore few files

there are some files which need not to be bothered

in order to add the ignore list . (refer 50) 

go to CUI : nano .gitignore

finally add .gitignore to staging and commit it

Cleaning junk files 

-git clean -n 

-git clean -f (forces to run and delete

all files which are not in staging directory)

but if you file add to staging (that file cannot be cleaned)	

so we need to reset , if we pushed the file to staging

-git reset HEAD junk1.txt

-git status 

-git clean - n (folders)

-git clean -f (this will force to remove all unstaged files ,be careful)

-git will not remove any files which are in

staging directory , we will need to reset them

back to the working directory so you can delete them

-git global ignore (as follows)

-git sample/.gitkeep (by default GIT cannot recognize the folder 

incase of any eventuality we can ask GIT to keep those directories 

that is where we can use .gitkeep (where you put this file will make
))

-git branch (this is the current branch)

-cat .git/HEAD (will return current branch)

-ls .git/refs/heads (lists of the branches)

-git log --oneline

-git branch new_feature (new branch)

-git branch (will point to current branch and show new branch created))

-cat .git/refs/heads/new_feature (shows checksum of this branch)

-cat .git/head (points head current branch)

-git checkout new_feature (this will point to newly created branch)

-git commit - am "your message" (commits all files)

-git show head (will show the change)

-git checkout -b rufix (creating and switching to thebranch)

the above means , it makes working directory and create a nw branch

check -- file (means checkout only file )

-git log--graph --oneline --decorate --all

(this will show all the commits with respect to the

Branches)

checkout (it exactly makes our working directory

to sync with repository , work directory should be clean 

which means all uncommmited codes should be commited before 

switching the branches)

if we are not staging ,for a file and you give following command

-git checkout master

( the above command will give you an error that following files 

would be overwritten , it says please commit your changes or stash

Them before you can switch branches ,get rid of conflicts before 

switching branch)

Compare the branches-we can compare the branches as following 

-git diff master..new_features(two branches separated by ".." range).

-git branch --merged (shows all branches if they 

have the changes or not! )

-git branch -m new_feature seo_little (this will change the branch name)


-git branch -d branchname (this will delete the branch)

while you are on the same branch you cannot delete

if you commit code on a branch and if you want to delete the branch

you need to give 

-git branch -d branchname

(MERGING WITH MAIN BRANCH) refer 57 graph , navigate to the branch where 

you want the changes to be received from giver 

"receiver always" to be navigated first 

git merge seo_little (this will return that updating , fast forward)

FAST FORWARD- means it directly attached the other branch 

with this branch without any commit. 

git merge -no-ff branch (this will do a merge commit to document

that you made some commmit , proof)

git merge --ff-only branch (only do a ff merge if you cant do

ff then simply abort).

non fast forward merge (TRUE MERGE)

for true merge , there will be a commit while merging also 

thats the only difference (GIt is intelligent enough to understand)

merge conflicts (if same file is changed in two branches then 

GIT doesn't understand which one to take , so manually resovle the 

conflicts)


-git log --graph --oneline --all --decorate (will decorate nicely and

show commits)



stash (4th area in GIT , apart from working ir , staging and repository)

there is no SHA for stash , temporary files

let's understand the use case 

lets say if you commited something in little_branch

and you're switching to master branch without 

committing the changed file , it will not 

allow you to do ,because the file is different in both the branches

so in this case stash can be used.

-git stash save "changed mission title"

this will create a swap out (points head to this)

-git stash list (will give lists of stash list)

stash is always irrespective of the branches 

it is accessible anywhere . 

try switching branches and use stash

-git stash show stash@{0} (used for info)

-git stash show -p stash@{0}

-git stash pop (this will bring in the working directory)

but will remove from stash 

-git stash apply (this will bring into working directory 

but also saved in stash) 

we can also store multiple stash 

for 3rd stash will be like stash@{2}

lets try with git stash pop

-git stash pop stash@{0}

git stash list (this will not list any stash as we

deleted )

git stash save "change to mission page title"

git checkout shorten_title 

git status (working directory clean)

git stash apply 

git stash list (this time it will not delete stash)

git stash drop stash@{0} will simply delete
 
git remote -v (what we have in remote repo and gives push and fetch)

git remote will give simply the name 

cat .git/config (will give the repo details like remote origin)

git  remote rm origin

git push - u origin master (push branch to repo)


after the above go to cat .git/config 

will give details about the branch definition

ls -la .git/refs/remotes/origin

cat .git/refs/remotes/origin/master (will refer to SHA)

git branch -r (shows remote branches)

git branch -a (shows all branches)

to get repo on local (as follows)

git clone https://github.com/sprathivadibhaya/sample.git myversion

so my version is the folder where the repo copy will copied in my local

in repo (server) always master is default ,

if you want particular branch select by using branch -b 

if you want to fetch from remote to my local (to make sync) as follows

-git fetch (if we created a new branch , unless we use this command

git cannot realise that there is a new branch created on remote)

git log --oneline -5 origin/master (same commits)

pull = fetch + merge (both will be done simultaneously)

remote checkouts 

git checkout -b non-tracking origin/non_tracking

(the above will get us a local branch non_tracking from remote 

 so what we commit in non_tracking by default will get synched

with remote/nontracking when we use the push command )

git push origin non_tracking:non_tracking
                       |         |
                      \ /       \ /   
                     local      remote 

to delete a remote branch 

git push origin --delete non_tracking 

fork - for getting write access


git config core.autocrlf false - we are ignoring the warnings 
                       


	git config --global user.email "srikanth.prathivadi@gmail.com" git config --global user.name "srikanth pb"


 




	

